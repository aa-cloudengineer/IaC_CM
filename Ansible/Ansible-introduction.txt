=============   What is Ansible? ===============

Whenever we speak about DevOps, we think of automation, and rightly so. There have been innumerable attempts to make things as automated as possible. The simplest of those would be Ansible.

Ansible as a tool can be categorized in automation, server management, provisioning, and configuration management and it would pass with flying colors as all of the above. The reason is the ability to adapt through regular integrations with ever-evolving technologies.

=================What makes Ansible different?===============================

When overseeing the administration of a network comprising many (say 100) servers via configuration management tools such as Puppet, Chef, or Salt Stack the conventional approach involves installing agents on each of these machines. However, with Ansible, this step is no longer required. Ansible uses established connections specific to specific operating systems; for Linux environments, it employs SSH, while for Windows systems, it uses winRM. This makes it simpler and easy to use.

Another plus point would be its "no residual software" policy which in simple terms is that when we write Ansible code, specifically playbooks, the process involves generating Python scripts. These scripts are then executed on a custom target, making desired changes. There is no residual or left-out software residue on either the target system or the control machine (the machine on which Ansible is running), making Ansible clean and efficient in execution.

And since it's based essentially on Python libraries, we can simply get started with a pip install command, along with other ways of course. This along with YAML being the standard in writing Ansible playbooks (a list of tasks) makes it a very "friendly" tool.

=============Installation,====================================================

A little assumption from my side is that you have a machine at your disposal that you could use. We could do with:

A virtual machine on your system (using Vagrant maybe) or

An EC2 instance preferably (t2.micro would work. Make sure you edit the security group for SSH inbound traffic from your IP)

Just make sure you have compute resources as well. Now, navigate to https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html and select the favorite OS and distro of your choice. Statistics and my personal bias say that Linux and Ubuntu respectively are the best for this.

You must execute the following commands in the CLI of your choice (mine is Git Bash) to install Ansible on the machine


COPY

COPY
$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible
and finally, we will validate our installation with a ansible --version command.

Great. We're now done with the installation of Ansible. This machine which now holds your Ansible power will henceforth be referred to as the "Control Machine".

=============Ansible architecture, ===================================

The architecture consists of a Control Machine, where we write the code and specify what we want to do and how we want to do it, a set of Target Machines we want to automate or "change", a configuration file, and an inventory file.


======================inventory and configuration files, =========================================

Ansible in order to perform automation needs to know where it has to do so. The inventory file defines that along with a few very important things. According to the official Ansible documentation (The simplest inventory is a single file with a list of hosts and groups. The default location for this file is /etc/ansible/hosts. You can specify a different inventory file at the command line using the -i <path> option or in configuration using inventory.)

=============Ansible ad-hoc commands ========================
Ansible ad hoc commands are CLI commands used for simple and one-time tasks. One-time tasks include checking whether the nodes are reachable over SSH, shutting down all nodes, and so on. They can easily be run at scale and even concurrently on several hosts at the same time with a single command. 
An Ansible ad hoc command uses the /usr/bin/ansible command-line tool to automate a single task on one or more managed nodes. ad hoc commands are quick and easy, but they are not reusable.

Syntax
ansible <hosts> [-m <module_name>] -a <"arguments"> -u <username> [--become]  

Explanation
Hosts: It can be an entry in the inventory file. For specifying all hosts in the inventory, use all or "*".

module_name: It is an optional parameter. There are hundreds of modules available in the Ansible, such as shell, yum, apt, file, and copy. By default, it is the command.

Arguments: We should pass values that are required by the module. It can change according to the module used.

Username: It specifies the user account in which Ansible can execute commands.

Become: It's an optional parameter specified when we want to run operations that need sudo privilege. By default, it becomes false.


1. Parallelism and shell commands
2. File Transfer
3. Managing Packages
4. anaging Users and Groups
5. Managing Services
6. Gathering Facts


Ansible ad hoc commands are idempotent—i.e., the state of the node is checked before executing the command, and if no state change can occur, the command isn’t executed.
https://docs.ansible.com/ansible/latest/command_guide/intro_adhoc.html

========================Ansible playbook.=====================================

Ansible Playbooks
Playbooks are the files where the Ansible code is written. Playbooks are written in YAML format. YAML means "Yet Another Markup Language," so there is not much syntax needed. Playbooks are one of the core features of Ansible and tell Ansible what to execute, and it is used in complex scenarios. They offer increased flexibility.

Playbooks contain the steps which the user wants to execute on a particular machine. And playbooks are run sequentially. Playbooks are the building blocks for all the use cases of Ansible.

Ansible playbooks tend to be more configuration language than a programming language.

Through a playbook, you can designate specific roles to some of the hosts and other roles to other hosts. By doing this, you can orchestrate multiple servers in very different scenarios, all in one playbook.

Playbook Structure
Each playbook is a collection of one or more plays. Playbooks are structured by using Plays. There can be more than one play inside a playbook.

(pic)


The Different YAML Tags

Let us now go through the different YAML tags. The different tags are described below −

name
This tag specifies the name of the Ansible playbook. As in what this playbook will be doing. Any logical name can be given to the playbook.

hosts
This tag specifies the lists of hosts or host group against which we want to run the task. The hosts field/tag is mandatory. It tells Ansible on which hosts to run the listed tasks. The tasks can be run on the same machine or on a remote machine. One can run the tasks on multiple machines and hence hosts tag can have a group of hosts’ entry as well.

vars
Vars tag lets you define the variables which you can use in your playbook. Usage is similar to variables in any programming language.

tasks
All playbooks should contain tasks or a list of tasks to be executed. Tasks are a list of actions one needs to perform. A tasks field contains the name of the task. This works as the help text for the user. It is not mandatory but proves useful in debugging the playbook. Each task internally links to a piece of code called a module. A module that should be executed, and arguments that are required for the module you want to execute.


======================Terms used in Ansible=======================================

Terms			Explanation
-------------------------------------------------------------------------------------------------------------------
Ansible Server: 	It is a machine where Ansible is installed and from which all tasks and playbooks will be executed.
Modules:		The module is a command or set of similar commands which is executed on the client-side.
Task:           	A task is a section which consists of a single procedure to be completed.
Role:           	It is a way of organizing tasks and related files to be later called in a playbook.
Fact:           	The information fetched from the client system from the global variables with the gather facts operation.
Inventory:      	A file containing the data regarding the Ansible client-server.
Play:           	It is the execution of the playbook.
Handler:        	The task is called only if a notifier is present.
Notifier:       	The section attributed to a task which calls a handler if the output is changed.
Tag:            	It is a name set to a task that can be used later on to issue just that specific task or group of jobs.
